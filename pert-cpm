import tkinter as tk
from tkinter import ttk
import networkx as nx
import matplotlib.pyplot as plt
import pandas as pd

# Definición de las actividades y sus duraciones
actividades = {
    'A': {'duración': 7, 'predecesoras': []},
    'B': {'duración': 3, 'predecesoras': ['A']},
    'C': {'duración': 6, 'predecesoras': []},
    'D': {'duración': 3, 'predecesoras': ['C']},
    'E': {'duración': 2, 'predecesoras': ['B', 'D']}
}

# Crear el gráfico dirigido
G = nx.DiGraph()

# Añadir nodos y aristas al gráfico
for actividad, info in actividades.items():
    G.add_node(actividad, duración=info['duración'])
    for predecesora in info['predecesoras']:
        G.add_edge(predecesora, actividad)

# Función para calcular las fechas de inicio y finalización
def calcular_fechas(G):
    # Calcular las fechas de inicio y finalización más tempranas
    for nodo in nx.topological_sort(G):
        predecesores = list(G.predecessors(nodo))
        if predecesores:
            G.nodes[nodo]['ES'] = max([G.nodes[p]['EF'] for p in predecesores])
        else:
            G.nodes[nodo]['ES'] = 0
        G.nodes[nodo]['EF'] = G.nodes[nodo]['ES'] + G.nodes[nodo]['duración']

    # Calcular las fechas de inicio y finalización más tardías
    for nodo in reversed(list(nx.topological_sort(G))):
        sucesores = list(G.successors(nodo))
        if sucesores:
            G.nodes[nodo]['LF'] = min([G.nodes[s]['LS'] for s in sucesores])
        else:
            G.nodes[nodo]['LF'] = G.nodes[nodo]['EF']
        G.nodes[nodo]['LS'] = G.nodes[nodo]['LF'] - G.nodes[nodo]['duración']

    # Calcular holgura y determinar la ruta crítica
    ruta_crítica = []
    for nodo in G.nodes:
        G.nodes[nodo]['holgura'] = G.nodes[nodo]['LS'] - G.nodes[nodo]['ES']
        if G.nodes[nodo]['holgura'] == 0:
            ruta_crítica.append(nodo)

    return ruta_crítica

ruta_crítica = calcular_fechas(G)

# Posiciones específicas de los nodos según la imagen
posiciones = {
    'A': (2, 2),
    'B': (4, 2),
    'C': (2, 0),
    'D': (4, 0),
    'E': (6, 1)
}

# Visualización de la red del proyecto
def mostrar_grafico():
    etiquetas = {nodo: f"{nodo}\n{G.nodes[nodo]['ES']}/{G.nodes[nodo]['EF']}\n{G.nodes[nodo]['LS']}/{G.nodes[nodo]['LF']}" for nodo in G.nodes}

    plt.figure(figsize=(10, 6))
    nx.draw(G, posiciones, with_labels=True, labels=etiquetas, node_size=3000, node_color='lightblue', font_size=8, font_weight='bold')
    nx.draw_networkx_nodes(G, posiciones, nodelist=ruta_crítica, node_color='orange')
    plt.title("Red del Proyecto de Mantenimiento de Dos Máquinas\n(Valores: ES/EF, LS/LF)")
    plt.show()

# Resultados en una tabla
resultados = []
for nodo in G.nodes:
    resultados.append({
        'Actividad': nodo,
        'Inicio más temprano (ES)': G.nodes[nodo]['ES'],
        'Inicio más tardío (LS)': G.nodes[nodo]['LS'],
        'Terminación más temprana (EF)': G.nodes[nodo]['EF'],
        'Terminación más tardía (LF)': G.nodes[nodo]['LF'],
        'Holgura (LS - ES)': G.nodes[nodo]['holgura'],
        '¿Ruta crítica?': 'Sí' if G.nodes[nodo]['holgura'] == 0 else 'No'
    })

df_resultados = pd.DataFrame(resultados)

# Crear una ventana con tkinter
root = tk.Tk()
root.title("Resultados del Proyecto de Mantenimiento de Dos Máquinas")

frame = ttk.Frame(root, padding="10")
frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

# Crear la tabla
treeview = ttk.Treeview(frame, columns=list(df_resultados.columns), show="headings")
for col in df_resultados.columns:
    treeview.heading(col, text=col)
    treeview.column(col, anchor=tk.CENTER)

for _, row in df_resultados.iterrows():
    treeview.insert("", "end", values=list(row))

treeview.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

# Añadir un botón para mostrar el gráfico
button_frame = ttk.Frame(root, padding="10")
button_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

button = ttk.Button(button_frame, text="Mostrar Gráfico", command=mostrar_grafico)
button.grid(row=0, column=0)

root.mainloop()
